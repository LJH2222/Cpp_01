다중 if문을 썼을 때와 쓰지 않았을 때를 비교해보는 시간을 가졌다.

입력받은 수가 양수인지 아닌지, 짝수인지 홀수인지를 판별할 때 다중 if문을 사용하는 것과 사용하지 않은 것이 어떻게 다른지 살펴봤다.

다중 if문을 사용할 땐 우선 입력받은 수가 양수인지 아닌지를 판별했다. 만약 양수라면 그 안에 다시 if문을 사용하여 짝수인지 홀수인지를 판별했다.

다중 if문을 사용하지 않는 경우에는 if문과 else if문을 사용하여 각 조건식에선

입력받은 수가 양수인지를 판별하는 조건식과 그 수가 짝수인지 아닌지를 판별하는 조건식을 논리 연사자로 결합하여 표현했다.

다중 if문을 사용하지 않았을 때의 불편한 점에 대해 이야기를 나눴을 때

1. 조건식이 길어져서 가독성이 떨어지고

2. 같은 조건을 반복해서 써야된다는 것 등의 의견을 주고받았다.

이 외에도 불편한 점이 있나 찾아봤는데 예를 들어 if (input >= 0 && input % 2 == 0)과 같은 문장에서

조건식이 거짓일 때, input값이 음수여서 거짓인 건지, 아니면 홀수여서 거짓인지를 판단할 수 없다는 것을 깨달았다.

조건을 순차적으로 판단해야 되는 환경에서는 다중 if문을 사용하면 조건을 손쉽게 파악할 수 있고 이처럼 사소한 아이디어가 나중에 큰 도움이 될 수 있을 거라는 결론을 내렸다.




if문으로 작성한 성적을 입력받아 학점 출력하기 프로그램을 switch~case문으로 바꿔보는 시간을 가졌다.

프로그램은

90~100점 : A학점
80~90점 : B학점
70~80점 : C학점
60~70점 : D학점
점수가 0~100 사이의 숫자가 아니면 exit

위와 같은 기준으로 실행된다.

우선 switch~case문은 switch문이 조건식을 평가한 뒤 그 식의 값이 case 상수와 일치하는 쪽으로 분기하여 해당 명령문을 수행한다.

case는 상수 값만 가질 수 있고 switch문의 조건식에는 반드시 수식이나 값을 넣어야 한다는 점을 이해하고 있어야 됐다.

점수를 10으로 나누면 몫을 구할 수 있는데 A학점의 경우 범위가 90 <= 점수 <= 100이므로

case 10:
case 9:
	printf("점수 %d는 A학점\n");
	break;

위와 같이 break문을 적절한 위치에 사용하여 표현할 수 있다.

if문으로 표현된 성적 출력 프로그램을 switch~case문으로 바꾸는 과정에서 

점수와 같은 고정된 값을 비교하는 경우엔 if문보다 switch~case문이 가독성이 더 뛰어나다는 점과

break문을 적절히 이용하면 명령문을 중복해서 쓸 필요가 없다는 것 등의 의견을 주고받으면서

결국 상황에 맞는 문법을 사용하여 가독성을 높이고 코드를 보다 효율적으로 작성할 수 있어야 한다는 결론을 내리게 되었다.
