이번 시간에는 구조체와 열거형을 배웠다.


구조체는 여러 자료형을 하나의 변수로 묶은 것으로 키워드 struct를 사용하여 정의한다.

struct 안의 각 구성 요소는 멤버라고 부르며 중괄호 안에 정의한다.

구조체의 메모리 크기를 구하는 것은 다른 일반적인 변수의 크기를 구하는 것과 달리 직관적이지 않다.

예를 들어

struct list {
	char name;
	char gender;
	int age;
};

위와 같은 구조체가 있을 때 메모리 크기는 char형 변수 2개와 int형 변수 1개로 그 크기가 6바이트일 것이라고 생각되지만 실제로는 8바이트로 나온다.

왜 이렇게 나오는 지 고민해 보니 8바이트는 int형 2개의 크기와 같다는 걸 알 수 있었다. 

즉, 4바이트에 총 2바이트 크기의 name변수와 gender 변수가 저장되고 나머지 4바이트에 4바이트 크기의 age 변수가 저장되는 것이다.

이를 통해 구조체 멤버가

char a;
int b;

위와 같은 경우에도 구조체의 크기가 8바이트인 걸 예측할 수 있었다.

구조체 멤버를 선언하는 순서도 중요한데

struct list {
	char a;
	int b;
	char a;
};

위와 같은 경우에는 구조체의 메모리 크기는 총 12바이트가 된다. 

결국 가장 큰 자료형의 크기를 단위로 해서 메모리에 나열되는 것으로 생각된다.



구조체 멤버에 접근하는 방법은 2가지가 있다.

1. 일반 변수 형태로 정의한 구조체의 경우.
2. 포인터를 이용하여 포인터 변수 형태로 정의한 구조체의 경우.

1번 같은 경우는 구조체_변수명.멤버명으로 도트(.)연산자를 사용한다.
2번 같은 경우는 구조체_포인터->멤버명으로 화살표(->)연산자를 사용한다.



typedef 키워드를 이용해 구조체를 재정의하여 좀 더 편하게 변수를 선언할 수 있다.

일반적으로 구조체는

struct list {
	char a;
	char b;
	int c;
};

struct list 변수명;

위와 같이 선언하는데 이때 typedef struct list s_list; 와 같이 typedef 키워드를 사용하면 

s_list 변수명; 

위와 같이 간단하게 변수를 선언할 수 있다.



포인터를 이용하여 구조체를 사용하고 함수의 인자로 구조체를 사용하는 방법은 일반적인 변수를 다룰 때와 큰 차이는 없다.

포인터를 이용할 때 구조체 멤버에 접근하는 방법이 조금 다르다는 점만 기억하면 된다.




열거형은 순서가 있고 새로운 값(상수)을 가질 수 있는 사용자 정의 자료형이다.

열거형의 정의와 사용 예는 다음과 같다.

enum 열거형_태그 { 열거형_상수_1, 열거형_상수_2 };
enum color { yellow, red, blue, green, magenta };

열거형의 선언은 다음과 같이 한다.

enum color col = red;
enum color { yellow, red, blue, green, magenta } col;

열거형 상수 리스트에 포함된 변수에는 0번부터 1씩 증가하면서 상숫값이 차례대로 붙는다.

예를 들어, 위의 열거형에서 yellow는 0이 되고, red는 1, green은 3이 된다.

green에 5를 지정하고 싶으면 아래와 같이 선언한다.

enum color { yellow, red, blue = 5, green, magenta };

이렇게 되면 yellow부터 순서대로 0, 1, 5, 6, 7로 상숫값이 변경된다.

정수형 변수 color의 값에 따라 출력하는 색이 달라지는 프로그램을 만들 때 열거형을 사용하면 보다 프로그램을 이해하기 쉬워진다.